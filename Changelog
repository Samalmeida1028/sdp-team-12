2/4/24:

1. Differential parameter in EKF: For wheel encoders, get position and velocity. Then, differentiate the position and compare to velocity to provide better odometry of robot compared to just using velocity -- commented out at the moment

2. Added extra level of averaging between front and back wheels before average left and right sides for both position and velocity

3. Removed - math.pi / 4 from twist angular Z in encoder odom publisher because we are no longer using Mecanum wheels

4. Update ceres loss function to HuberLoss in SLAM configuration and change trust strategy to DOGLEG

5. RPLiDAR direction switch so that the TF for it on URDF is facing front instead of back of robot. May cause map jump issue? -> Did not do anything

6. Change encoder and IMU odom publisher period from 0.16 -> 0.016 and match with SLAM map transform publishing

7. Add encoder position to /wheel/odom in EKF because we have better wheels. Odometry update is way better now

8. Commented out LiDAR odometry for EKF

9. Tried messing around on Pico code. The big issue now is the robot does not turn as we want it to. No point turn capability with  nav,and 90 degree turning is also bad. Need to figure out and fix the turning. Other than that, odometry is so much better and the updates have minor errors only. 

2/5/24:

1. Updated serial handler teleop to take in Twist messages from teleop_twist_keyboard to test out pico code

2. Changed Pico code to match diff drive dynamics equations as per ros2_control. The Twist messages are being received a lot better, but robot is noticeably faster

3. Tried experimenting with ros2_control again but failed to fix serial issue

4. When robot made a full 180 degree turn, it had turned less on RViz. This is because we are dividing by wheel separation instead of wheel radius in sens2odom.py. Fixing this number should cause the turn amount to be correct 

2/7/24:

1. Pushed buggy nav to whatsgoingonomg branch and came back to nav_physical when it was all working fine

2. Made some changes to pico code. Pico now sends different values for encoder pos and velocity. The conversions are in sens2odom

3. Some minor changes to sens2odom. Navigation is working well all the transforms are good and on the robot. Tested with serial as well. Robot turns well. 

4. I think there is an electrical issue. Nav was working well and then all of a sudden the left front wheel went mad and messed up navigation. Some loose wire connection I think 

5. Confirmed there is an electrical issue. After switching drivers the issue still occurred in the front left wheel. So something is wrong from connection from driver to left front motor that is causing it go ham. Will need to take apart wiring and debug extensively 

2/8/24:

1. Tried integration of target tracking and navigation. Still needs a lot of work, but we got the goal pose publishing and the robot does move toward it 

2. Create a launch file that launches target_pub, image_pub, nav2pose

3. Changed lines 124 and 185 in nav2_params.yaml to make robot turn less violently

4. Tested out integration. TODO in nav_physical.launch.py

2/9/24:

1. Some changes to nav2pose.py to update goal pose accordingly. The robot orientation was not being taken into consideration while the goal pose was published, causing error in navigation. Did not work

2. Updated teleop.launch.py to have target_tracking.launch.py so we can see the goal poses being published according to the robot location while teleoperating (debugging)

3. Updated sens2odom.py with self.phi*10 to fix odom orientation updates

4. Changed current_pose updates from Odometry to TFMessage from the transform tree because the goal poses were not publishing correctly. Testing found a bunch of new errors in odometry

5. Pushed to nav_unstable. Turning is the biggest issue right now that needs to be fixed in odometry

2/10/24:

1. Fixed odometry to be really good. It was a divide by pi in velocity of each wheel that needed to happen to fix it

2. Updated robot footprint for costmaps in nav2_params.yaml so paths planned will be further away from collision

3. Changed goal pose publishing from transform to odometry because the odometry is on point. It is offset by some amount but it is changing with the robot movement. Needs more work

4. Merged nav_unstable into nav_physical 

2/11/24:

1. Made serial_handler more robust

2. Fixed small errors in pico code to more accurately reflect differential drive kinematics in motor control

3. Added some code to servos to make target tracking reporting of angles smoother

4. Removed image_pub from the main provider of servo information, now in serial handler

5.  Tweaked phi to make it more accurate to rotation

6. Tweaked odometry to make it fit teleop better

7. Improved target publishing wrt orientation, now it is about 90% there, it rotates with the target correctly

8. IMPORTANT-- Found several more issues witth turning impacting odometry, more testing is needed because at this stage 90 degree and above turns still significantly impact odometry unfortunately - will probably need significantly more time, tweaking of nav parameters, and phi still drifts over a period of time

9. Changed location of motor drivers and determined funky driving must be electrical

10. Fixed power bus 


