2/4/24:

1. Differential parameter in EKF: For wheel encoders, get position and velocity. Then, differentiate the position and compare to velocity to provide better odometry of robot compared to just using velocity -- commented out at the moment

2. Added extra level of averaging between front and back wheels before average left and right sides for both position and velocity

3. Removed - math.pi / 4 from twist angular Z in encoder odom publisher because we are no longer using Mecanum wheels

4. Update ceres loss function to HuberLoss in SLAM configuration and change trust strategy to DOGLEG

5. RPLiDAR direction switch so that the TF for it on URDF is facing front instead of back of robot. May cause map jump issue? -> Did not do anything

6. Change encoder and IMU odom publisher period from 0.16 -> 0.016 and match with SLAM map transform publishing

7. Add encoder position to /wheel/odom in EKF because we have better wheels. Odometry update is way better now

8. Commented out LiDAR odometry for EKF

9. Tried messing around on Pico code. The big issue now is the robot does not turn as we want it to. No point turn capability with  nav,and 90 degree turning is also bad. Need to figure out and fix the turning. Other than that, odometry is so much better and the updates have minor errors only. 

2/5/24:

1. Updated serial handler teleop to take in Twist messages from teleop_twist_keyboard to test out pico code

2. Changed Pico code to match diff drive dynamics equations as per ros2_control. The Twist messages are being received a lot better, but robot is noticeably faster

3. Tried experimenting with ros2_control again but failed to fix serial issue
